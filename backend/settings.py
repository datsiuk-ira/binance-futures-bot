"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from datetime import timedelta

import environ
from pathlib import Path

from celery.schedules import crontab
from django.utils.translation import gettext_lazy as _
from decouple import config, Csv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
env = environ.Env()
environ.Env.read_env(BASE_DIR / '.env')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")
DEBUG = env.bool("DEBUG", default=False)
ALLOWED_HOSTS = env.list("DJANGO_ALLOWED_HOSTS", default=["localhost", "127.0.0.1", "0.0.0.0"])

# Application definition

INSTALLED_APPS = [
    'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "rest_framework",
    'rest_framework_simplejwt',
    "channels",
    'corsheaders',
    'api.apps.ApiConfig',
    'arima.apps.ArimaConfig',
    'binance_connector.apps.BinanceConnectorConfig',
    'bot.apps.BotConfig',
    'celery_tasks.apps.CeleryTasksConfig',
    'indicators.apps.IndicatorsConfig',
    'strategies.apps.StrategiesConfig',
    'trades.apps.TradesConfig',
    'users.apps.UsersConfig',
    'websocket.apps.WebsocketConfig',
    'django_celery_beat'
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ALLOW_ALL_ORIGINS = True # НЕ для production!
CORS_ALLOW_CREDENTIALS = True

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60), # Example: 1 hour
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),    # Example: 1 day
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True, # Requires separate app for blacklist
    # ... other JWT settings
}

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": env("POSTGRES_DB"),
        "USER": env("POSTGRES_USER"),
        "PASSWORD": env("POSTGRES_PASSWORD"),
        "HOST": env("POSTGRES_HOST"),
        "PORT": env("POSTGRES_PORT"),
    }
}

# Channels (WebSocket)
ASGI_APPLICATION = 'backend.asgi.application'
REDIS_URL = env('REDIS_URL')

# CHANNEL_LAYERS = {
#     'default': {
#         'BACKEND': 'channels.layers.InMemoryChannelLayer',
#     },
# }
CHANNELS_REDIS_HOST = env('CHANNELS_REDIS_HOST') # Читаємо з середовища
CHANNELS_REDIS_PORT = env.int('CHANNELS_REDIS_PORT') # Читаємо з середовища

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [(CHANNELS_REDIS_HOST, CHANNELS_REDIS_PORT)],
        },
    },
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = "users.User"


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "static"
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LANGUAGE_CODE = 'en' # Мова за замовчуванням

LANGUAGES = [
    ('en', _('English')),
]

LOCALE_PATHS = [
    BASE_DIR / 'locale', # Шлях до файлів перекладу
]

USE_I18N = True
USE_L10N = True # Для форматування дат/чисел відповідно до локалі
USE_TZ = True


# Binance API Settings
BINANCE_API_KEY = config('BINANCE_API_KEY')
BINANCE_SECRET_KEY = config('BINANCE_SECRET_KEY')
USE_BINANCE_TESTNET = config('USE_BINANCE_TESTNET', default=True, cast=bool)

BINANCE_FUTURES_API_BASE_URL = config('BINANCE_FUTURES_API_BASE_URL', default='https://fapi.binance.com')
BINANCE_FUTURES_WS_BASE_URL = config('BINANCE_FUTURES_WS_BASE_URL', default='wss://fstream.binance.com')

# Maximum number of klines to keep in memory for indicator calculations in WebSocket consumer
MAX_KLINES_MEMORY_FOR_INDICATORS = config('MAX_KLINES_MEMORY_FOR_INDICATORS', default=500, cast=int)

# Maximum number of klines to fetch for historical data API endpoint
MAX_KLINES_HISTORICAL_FETCH = config('MAX_KLINES_HISTORICAL_FETCH', default=1000, cast=int)


# Celery setup
CELERY_BROKER_URL = env("REDIS_URL", default="redis://redis:6379/0")
CELERY_RESULT_BACKEND = env("REDIS_URL", default="redis://redis:6379/0")
CELERY_ACCEPT_CONTENT = ["json", "pickle"] # Додаємо 'pickle' для деяких випадків, але 'json' краще для сумісності
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = TIME_ZONE # Використовувати часову зону Django
CELERY_TASK_TRACK_STARTED = True # Якщо хочете бачити, коли таски стартують
CELERY_TASK_TIME_LIMIT = 30 * 60

CELERY_BEAT_SCHEDULE = {
    'fetch-btcusdt-1m-data-every-minute': {
        'task': 'fetch_and_send_market_data', # Повна назва таску (якщо не вказано name в @shared_task)
                                            # або 'celery_tasks.tasks.fetch_and_send_market_data_task'
                                            # або name="fetch_and_send_market_data" з декоратора
        'schedule': crontab(minute='*'),  # Запускати кожну хвилину
        'args': ('BTCUSDT', '1m'),       # Аргументи для таску: (pair_symbol, interval)
        'kwargs': {'limit': 20}       # Можна передавати іменовані аргументи
    },
    'fetch-ethusdt-5m-data-every-5-minutes': {
        'task': 'fetch_and_send_market_data',
        'schedule': crontab(minute='*/5'), # Запускати кожні 5 хвилин
        'args': ('ETHUSDT', '5m'),
        'kwargs': {'limit': 20}
    },
    # Додайте інші пари/інтервали за потребою
}


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG', # Встановлюємо рівень DEBUG для обробника консолі
            'class': 'logging.StreamHandler',
            'formatter': 'verbose', # Можна використовувати 'simple' для коротших логів
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO', # Логи від самого Django
            'propagate': True,
        },
        'django.request': {
            'handlers': ['console'],
            'level': 'WARNING', # Зазвичай багато INFO логів про запити
            'propagate': False,
        },
        'celery': { # Логи від Celery (якщо потрібно бачити їх і тут)
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'websocket': { # Логер для вашого додатку websocket (включаючи consumers.py)
            'handlers': ['console'],
            'level': 'DEBUG', # Встановлюємо рівень DEBUG
            'propagate': True,
        },
        # Можна додати інші специфічні логери для ваших додатків
        # наприклад, 'celery_tasks', 'indicators'
        'celery_tasks': {
             'handlers': ['console'],
             'level': 'DEBUG',
             'propagate': True,
        },
        'indicators': {
             'handlers': ['console'],
             'level': 'DEBUG',
             'propagate': True,
        }
    },
    'root': { # Кореневий логер, який буде ловити все, що не оброблено іншими
        'handlers': ['console'],
        'level': 'INFO', # Загальний рівень для всього іншого
    }
}